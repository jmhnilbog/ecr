{
	"_id": "AO7yaDR04g0WYoSC",
	"name": "Set Token Lighting and Vision",
	"type": "script",
	"author": "oVvfrcHQErm1ON0p",
	"img": "icons/magic/perception/eye-slit-red-orange.webp",
	"scope": "global",
	"command": "\"use strict\";\n// A macro for the Foundry virtual tabletop that lets a user configure their token's vision and lighting settings. This script is taken from Sky's foundry repo here: https://github.com/Sky-Captain-13/foundry/blob/master/scriptMacros/tokenVision.js.\n// import { AnimationData } from '@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs/animationData';\nlet applyChanges = false;\nnew Dialog({\n    title: `Token Vision Configuration`,\n    content: `\n    <form>\n      <div class=\"form-group\">\n        <label>Vision Type:</label>\n        <select id=\"vision-type\" name=\"vision-type\">\n          <option value=\"nochange\">No Change</option>\n          <option value=\"normal-man\">Normal Man</option>\n          <option value=\"under-sight\">Under-Sight</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Light Source:</label>\n        <select id=\"light-source\" name=\"light-source\">\n          <option value=\"nochange\">No Change</option>\n          <option value=\"none\">None</option>\n          <option value=\"candle\">Candle</option>\n          <option value=\"torch\">Torch</option>\n          <option value=\"oil-lamp\">Oil Lamp</option>\n          <option value=\"bullseye-lantern\">Bullseye Lantern</option>\n        </select>\n      </div>\n    </form>\n    `,\n    buttons: {\n        yes: {\n            icon: \"<i class='fas fa-check'></i>\",\n            label: `Apply Changes`,\n            callback: () => (applyChanges = true),\n        },\n        no: {\n            icon: \"<i class='fas fa-times'></i>\",\n            label: `Cancel Changes`,\n        },\n    },\n    default: 'yes',\n    close: (html) => {\n        var _a, _b, _c;\n        if (applyChanges) {\n            const el = html;\n            for (let token of ((_a = canvas === null || canvas === void 0 ? void 0 : canvas.tokens) === null || _a === void 0 ? void 0 : _a.controlled) || []) {\n                let visionType = \n                // @ts-ignore\n                ((_b = el.find('[name=\"vision-type\"]')[0]) === null || _b === void 0 ? void 0 : _b.value) || 'none';\n                let lightSource = \n                // @ts-ignore\n                ((_c = el.find('[name=\"light-source\"]')[0]) === null || _c === void 0 ? void 0 : _c.value) || 'none';\n                let dimSight = 0;\n                let brightSight = 0;\n                let dimLight = 0;\n                let brightLight = 0;\n                let lightAngle = 360;\n                let lockRotation = token.data.lockRotation;\n                let lightAnimation /* : Partial<AnimationData> */ = token.data.light.animation;\n                let lightAlpha = token.data.light.alpha;\n                let lightColor = token.data.light.color;\n                const colorFire = '#f8c377'; // #9c6d0c\n                const colorWhite = '#ffffff';\n                const colorMoonGlow = '#f4f1c9';\n                // Get Vision Type Values\n                switch (visionType) {\n                    case 'normal man':\n                        dimSight = 1.5;\n                        brightSight = 0;\n                        break;\n                    case 'under-sight':\n                        dimSight = 60;\n                        brightSight = 30;\n                        break;\n                    case 'nochange':\n                    default:\n                        dimSight = token.data.dimSight;\n                        brightSight = token.data.brightSight;\n                }\n                // Get Light Source Values\n                switch (lightSource) {\n                    case 'none':\n                        dimLight = 0;\n                        brightLight = 0;\n                        lightAnimation = Object.assign(Object.assign({}, lightAnimation), { type: 'none' });\n                        break;\n                    case 'candle':\n                        dimLight = 20;\n                        brightLight = 5;\n                        lightAnimation = Object.assign(Object.assign({}, lightAnimation), { type: 'torch', speed: 2, intensity: 2 });\n                        lightColor = colorFire;\n                        lightAlpha = 0.15;\n                        break;\n                    case 'torch':\n                        dimLight = 35;\n                        brightLight = 25;\n                        lightAnimation = Object.assign(Object.assign({}, lightAnimation), { type: 'torch', speed: 2, intensity: 2 });\n                        lightColor = colorFire;\n                        lightAlpha = 0.15;\n                        break;\n                    case 'oil-lamp':\n                        dimLight = 45;\n                        brightLight = 15;\n                        lightAnimation = Object.assign(Object.assign({}, lightAnimation), { type: 'torch', speed: 2, intensity: 2 });\n                        lightColor = colorFire;\n                        lightAlpha = 0.15;\n                        break;\n                    case 'bullseye-lantern':\n                        dimLight = 120;\n                        brightLight = 60;\n                        lockRotation = false;\n                        lightAngle = 52.5;\n                        lightAnimation = Object.assign(Object.assign({}, lightAnimation), { type: 'torch', speed: 2, intensity: 2 });\n                        lightColor = colorFire;\n                        lightAlpha = 0.15;\n                        break;\n                    // case 'hooded-dim':\n                    //     dimLight = 5;\n                    //     brightLight = 0;\n                    //     lightAnimation = {\n                    //         ...lightAnimation,\n                    //         type: 'torch',\n                    //         speed: 2,\n                    //         intensity: 2,\n                    //     };\n                    //     lightColor = colorFire;\n                    //     lightAlpha = 0.15;\n                    //     break;\n                    // case 'hooded-bright':\n                    //     dimLight = 60;\n                    //     brightLight = 30;\n                    //     lightAnimation = {\n                    //         ...lightAnimation,\n                    //         type: 'torch',\n                    //         speed: 2,\n                    //         intensity: 2,\n                    //     };\n                    //     lightColor = colorFire;\n                    //     lightAlpha = 0.15;\n                    //     break;\n                    // case 'light':\n                    //     dimLight = 40;\n                    //     brightLight = 20;\n                    //     lightAnimation = { ...lightAnimation, type: 'none' };\n                    //     lightColor = colorWhite;\n                    //     lightAlpha = 0.15;\n                    //     break;\n                    // case 'moon-touched':\n                    //     dimLight = 30;\n                    //     brightLight = 15;\n                    //     lightAnimation = { ...lightAnimation, type: 'none' };\n                    //     lightColor = colorMoonGlow;\n                    //     break;\n                    case 'nochange':\n                    default:\n                        dimLight = token.data.light.dim;\n                        brightLight = token.data.light.bright;\n                        lightAngle = token.data.light.angle;\n                        lockRotation = token.data.lockRotation;\n                        lightAnimation = token.data.light.animation;\n                        lightAlpha = token.data.light.alpha;\n                        lightColor = token.data.light.color;\n                }\n                // Update Token\n                console.log(token);\n                token.document.update({\n                    vision: true,\n                    dimSight,\n                    brightSight,\n                    lockRotation,\n                    light: {\n                        dim: dimLight,\n                        bright: brightLight,\n                        color: lightColor,\n                        alpha: lightAlpha,\n                        angle: lightAngle,\n                        animation: lightAnimation,\n                    },\n                });\n            }\n        }\n    },\n}).render(true);",
	"folder": null,
	"sort": 0,
	"permission": {
		"default": 0,
		"oVvfrcHQErm1ON0p": 3
	},
	"flags": {}
}